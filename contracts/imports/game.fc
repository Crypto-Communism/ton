/*
 * buildings:
 * 0 - factory
 * 1 - farm
 * 2 - jail
 */
struct Buildings {
  factories: Int as uint64 = 0;
  farms: Int as uint64 = 0;
  jails: Int as uint64 = 0;
}

fun buildMore(b: Buildings, buildingType: Int, value: Int) {
  if (buildingType == 0) {
    b.factories = b.factories + value;
  }
  else if (buildingType == 1) {
    b.farms = b.farms + value;
  }
  else if (buildingType == 2) {
    b.jails = b.jails + value;
  }
}

fun getByNumber(b: Buildings, n: Int): Int {
  if (n == 0) {
    return b.factories;
  }
  else if (n == 1) {
    return b.farms;
  }
  else if (n == 2) {
    return b.jails;
  }

  throw(42);
}

/*
 * Player statuses:
 * 0 - playing
 * 1 - sent to GULAG
 * 2 - dekulakized
 * 3 - special, resigned
 */

struct Player {
  address: Address;
  status: Int as uint8 = -1;
  normVote: Int as int8 = -1;
  dekulakVote: Int as int8 = -1;
  buildings: Buildings;
  balance: Int as uint64 = 0;
  chosen: Bool = false;
}

fun playerToString(p: Player): String {
  let bs = beginString();
  bs.append(p.address.toString());
  bs.append(":");
  bs.append(p.status.toString());

  return bs.toString();
}
/*
 * actions:
 * 0 - build something
 * 1 - vote to dekulakize
 * 2 - vote for new norm
 */

struct Move {
  playerId: Int as uint8;
  action: Int as uint8;
  arg1: Int? as uint8;
  arg2: Int? as uint64;
}

message Moves {
  head: Cell;
}

trait Game {
  winner: Int as int8 = -1;
  round: Int as uint8 = 0;
  const MaxPlayers: Int = 5;
  players: map<Int as uint8, Player>;
  playersLength: Int as uint8 = 0;

  fun pushPlayer(addr: Address, deposit: Int) {
    if (self.playersLength >= self.MaxPlayers) {
      throw(36);
    } else {
      self.players.set(self.playersLength, Player{ address: addr, balance: deposit, status: 0, chosen: self.playersLength == 0 });
      self.playersLength += 1;
    }
  }

  fun loadMove(ps: Slice): Move {
    /*
     * playerId: Int as uint8;
     * action: Int as uint8;
     * arg1: Int? as uint8;
     * arg2: Int? as uint64;
     */
    let playerId: Int = ps.loadUint(8);
    let action: Int = ps.loadUint(8);
    let arg1: Int = ps.loadUint(8);
    if (action == 0) { //build
      let arg2: Int = ps.loadCoins();
      return Move{ playerId, action, arg1, arg2 };
    }
    else {
      return Move{ playerId, action, arg1 };
    }
  }

  fun onMove(ps: Slice) {
    let m: Move = self.loadMove(ps);
    evalMove(self.players, m);

    let gameStatus: Int = roundCheck(players, playersLength, self.round);

    if (gameStatus == 0) {
      //DO NOTHING
    }
    else if (gameStatus == 1) {
      self.round = self.round + 1;
      resetPlayers(players, playersLength);
    }
    else if (gameStatue == 2) {
      let i: Int = 0;
      while (i < playersLength) {
        let p: Player = self.players.get(i)!!;

        if (p.status == 0 && p.address) {
          self.winner = i;
          self.sendJetton(Withdraw{ amount: self.balance, desination: p.address, queryId: self.seqno });

          return;
        }

        i = i + 1;
      }
    }
  }
}
